from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder

from services.text_manager import get_text
from services.file_manager import get_faculties
from utils.emoji import add_emoji_to_text

# –ö–æ—Ä–æ—Ç–∫–∏–µ –∏–º–µ–Ω–∞ –¥–ª—è —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç–æ–≤ (–¥–ª—è callback_data –∏ –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏)
UNIVERSITY_SHORTCUTS = [
    "spbgpmu",  # –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥—Å–∫–∏–π –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω—ã–π –ø–µ–¥–∏–∞—Ç—Ä–∏—á–µ—Å–∫–∏–π –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–π —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç
    "vmeda",    # –í–æ–µ–Ω–Ω–æ-–º–µ–¥–∏—Ü–∏–Ω—Å–∫–∞—è –∞–∫–∞–¥–µ–º–∏—è –∏–º–µ–Ω–∏ –°. –ú. –ö–∏—Ä–æ–≤–∞
    "szgmu",    # –°–µ–≤–µ—Ä–æ-–ó–∞–ø–∞–¥–Ω—ã–π –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω—ã–π –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–π —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç –∏–º. –ò.–ò.–ú–µ—á–Ω–∏–∫–æ–≤–∞
    "reaviz",   # –£–ù–ò–í–ï–†–°–ò–¢–ï–¢ –†–ï–ê–í–ò–ó
    "spbmsi"    # –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥—Å–∫–∏–π –º–µ–¥–∏–∫–æ-—Å–æ—Ü–∏–∞–ª—å–Ω—ã–π –∏–Ω—Å—Ç–∏—Ç—É—Ç
]

async def get_university_selection_keyboard(language: str, selected_university: str = None) -> InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–µ—Ç –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç–∞

    –ê—Ä–≥—É–º–µ–Ω—Ç—ã:
        language (str): –ö–æ–¥ —è–∑—ã–∫–∞ (ru, en, ar)
        selected_university (str, optional): –ö–æ—Ä–æ—Ç–∫–æ–µ –∏–º—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç–∞

    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
        InlineKeyboardMarkup: –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏ —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç–æ–≤
    """
    builder = InlineKeyboardBuilder()

    for univ_shortcut in UNIVERSITY_SHORTCUTS:
        # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç–∞
        univ_text = get_text(language, f"univ_{univ_shortcut}")

        # –î–æ–±–∞–≤–ª—è–µ–º –≥–∞–ª–æ—á–∫—É –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç–∞
        if univ_shortcut == selected_university:
            univ_text = add_emoji_to_text("üèõÔ∏è", univ_text) + " ‚úÖ"
        else:
            univ_text = add_emoji_to_text("üèõÔ∏è", univ_text)

        builder.row(
            InlineKeyboardButton(text=univ_text, callback_data=f"univ:{univ_shortcut}")
        )

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞
    language_settings_text = add_emoji_to_text("üåê", get_text(language, "language_settings_button"))
    builder.row(
        InlineKeyboardButton(text=language_settings_text, callback_data="open_language_settings")
    )

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    back_text = add_emoji_to_text("üîô", get_text(language, "back_to_main_menu"))
    builder.row(
        InlineKeyboardButton(text=back_text, callback_data="back_to_main")
    )

    return builder.as_markup()

async def get_faculty_selection_keyboard_with_selected(language: str, selected_university: str = None, selected_faculty: str = None) -> InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–µ—Ç –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–∞ —Å –æ—Ç–º–µ—Ç–∫–æ–π –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ

    –ê—Ä–≥—É–º–µ–Ω—Ç—ã:
        language (str): –ö–æ–¥ —è–∑—ã–∫–∞ (ru, en, ar)
        selected_university (str, optional): –ö–æ—Ä–æ—Ç–∫–æ–µ –∏–º—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç–∞
        selected_faculty (str, optional): –í—ã–±—Ä–∞–Ω–Ω—ã–π —Ñ–∞–∫—É–ª—å—Ç–µ—Ç

    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
        InlineKeyboardMarkup: –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–æ–≤
    """
    builder = InlineKeyboardBuilder()

    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç–µ
    if selected_university:
        # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç–∞
        university_text = get_text(language, f"univ_{selected_university}")

        university_text = add_emoji_to_text("üèõÔ∏è", university_text) + " ‚úÖ"
        builder.row(
            InlineKeyboardButton(text=university_text, callback_data=f"back_to_univ")
        )

    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–æ–≤ –∏–∑ —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã
    faculties = await get_faculties()

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–∞
    for faculty in faculties:
        # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –ø–µ—Ä–µ–≤–æ–¥ –Ω–∞–∑–≤–∞–Ω–∏—è —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–∞
        faculty_key = f"faculty_{faculty.split()[0][0]}_name"  # –ù–∞–ø—Ä–∏–º–µ—Ä, "faculty_L_name" –¥–ª—è "–õ–µ—á–µ–±–Ω—ã–π —Ñ–∞–∫—É–ª—å—Ç–µ—Ç"
        faculty_text = get_text(language, faculty_key, default=faculty)

        # –î–æ–±–∞–≤–ª—è–µ–º –≥–∞–ª–æ—á–∫—É, –µ—Å–ª–∏ —ç—Ç–æ –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ñ–∞–∫—É–ª—å—Ç–µ—Ç
        if faculty == selected_faculty:
            faculty_text = add_emoji_to_text("üè´", faculty_text) + " ‚úÖ"
        else:
            faculty_text = add_emoji_to_text("üè´", faculty_text)

        builder.row(
            InlineKeyboardButton(text=faculty_text, callback_data=f"faculty:{faculty}")
        )

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞
    language_settings_text = add_emoji_to_text("üåê", get_text(language, "language_settings_button"))
    builder.row(
        InlineKeyboardButton(text=language_settings_text, callback_data="open_language_settings")
    )

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    back_text = add_emoji_to_text("üîô", get_text(language, "back_to_main_menu"))
    builder.row(
        InlineKeyboardButton(text=back_text, callback_data="back_to_main")
    )

    return builder.as_markup()
