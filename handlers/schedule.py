from aiogram import Dispatcher, types
from aiogram.types import InlineKeyboardMarkup
import os

from keyboards.schedule_kb import get_schedule_keyboard
from keyboards.inline_kb import get_back_keyboard

from services.text_manager import get_text
from utils.emoji import add_emoji_to_text

from config import IMAGES_FOLDER

async def schedule_handler(message: types.Message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ"
    """
    user_language = message.data.get('user_language', 'ru')

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
    schedule_text = get_text(user_language, "schedule_text")

    # –ü–æ–ª—É—á–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
    keyboard = get_schedule_keyboard(user_language)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤—ã–±–æ—Ä–æ–º —Ç–∏–ø–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
    await message.answer(
        text=schedule_text,
        reply_markup=keyboard
    )

async def schedule_type_callback(callback_query: types.CallbackQuery, callback_data: dict):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
    """
    user_language = callback_query.data.get('user_language', 'ru')
    schedule_type = callback_data["value"]

    # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—É—Ç—å –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é
    image_path = os.path.join(IMAGES_FOLDER, f"{schedule_type}.png")

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
    schedule_text_key = f"{schedule_type}_schedule_text"
    schedule_text = get_text(user_language, schedule_text_key)

    # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback
    await callback_query.answer()

    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
        if not os.path.exists(image_path):
            await callback_query.message.edit_text(
                text=f"{get_text(user_language, 'image_not_found')}",
                reply_markup=get_back_keyboard(user_language, "back_to_schedule")
            )
            return

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
        with open(image_path, 'rb') as photo:
            # –°–Ω–∞—á–∞–ª–∞ –æ—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback –∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            await callback_query.message.edit_text(schedule_text)

            # –ó–∞—Ç–µ–º –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            await callback_query.message.answer_photo(
                photo=photo,
                caption=schedule_text,
                reply_markup=get_back_keyboard(user_language, "back_to_schedule")
            )

    except Exception as e:
        # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ —Å–æ–æ–±—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await callback_query.message.edit_text(
            text=f"{get_text(user_language, 'error_sending_image')}: {str(e)}",
            reply_markup=get_back_keyboard(user_language, "back_to_schedule")
        )

async def back_to_schedule_callback(callback_query: types.CallbackQuery):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –≤—ã–±–æ—Ä—É —Ç–∏–ø–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
    """
    user_language = callback_query.data.get('user_language', 'ru')

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
    schedule_text = get_text(user_language, "schedule_text")

    # –ü–æ–ª—É—á–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
    keyboard = get_schedule_keyboard(user_language)

    # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback –∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    await callback_query.answer()
    await callback_query.message.edit_text(
        text=schedule_text,
        reply_markup=keyboard
    )

def register_schedule_handlers(dp: Dispatcher):
    """
    –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Ä–∞–∑–¥–µ–ª–∞ —Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º
    """
    dp.register_message_handler(
        schedule_handler,
        lambda message: message.text.startswith("üìÜ")
    )

    dp.register_callback_query_handler(
        schedule_type_callback,
        lambda c: c.data.startswith("schedule:"),
        lambda c: {"value": c.data.split(":")[1]}
    )

    dp.register_callback_query_handler(
        back_to_schedule_callback,
        lambda c: c.data == "back_to_schedule"
    )
