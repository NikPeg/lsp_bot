from aiogram import Dispatcher, types
from aiogram.types import InlineKeyboardMarkup
import os

from keyboards.learning_kb import get_navigation_keyboard
from keyboards.inline_kb import get_back_keyboard, get_after_file_keyboard

from database.db_manager import get_user_faculty, get_user_language

from services.text_manager import get_text
from services.file_manager import get_directories, get_files, check_file_exists

from utils.helpers import get_parent_path, format_path, is_image_file
from utils.emoji import add_emoji_to_text

from config import MATERIALS_FOLDER

async def learning_handler(message: types.Message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–¶–µ–Ω—Ç—Ä –æ–±—É—á–µ–Ω–∏—è"
    """
    user_id = message.from_user.id
    user_language = message.data.get('user_language', 'ru')

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —Ñ–∞–∫—É–ª—å—Ç–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    faculty = await get_user_faculty(user_id)

    if not faculty:
        # –ï—Å–ª–∏ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç –Ω–µ –≤—ã–±—Ä–∞–Ω, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–Ω–∞—á–∞–ª–∞ –≤—ã–±—Ä–∞—Ç—å —Ñ–∞–∫—É–ª—å—Ç–µ—Ç
        text = get_text(user_language, "please_select_faculty")
        await message.answer(text)
        return await message.forward(lambda: profile_handler(message))

    # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—É—Ç—å –∫ –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–∞
    faculty_path = os.path.join(MATERIALS_FOLDER, faculty)

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è —Ü–µ–Ω—Ç—Ä–∞ –æ–±—É—á–µ–Ω–∏—è
    learning_center_text = get_text(user_language, "learning_center_text")
    faculty_text = get_text(user_language, f"faculty_{faculty.split()[0][0]}_name", default=faculty)

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–æ–º
    text = f"{learning_center_text}\n\n{get_text(user_language, 'current_faculty').format(faculty=faculty_text)}"

    # –ü–æ–ª—É—á–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    keyboard = await get_navigation_keyboard(user_language, faculty_path)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–∞–≤–∏–≥–∞—Ü–∏–µ–π
    await message.answer(
        text=text,
        reply_markup=keyboard
    )

async def navigate_callback(callback_query: types.CallbackQuery, callback_data: dict):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ –ø–∞–ø–∫–∞–º —Å –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º–∏
    """
    user_language = callback_query.data.get('user_language', 'ru')
    path = callback_data["value"]

    # –ü–æ–ª—É—á–∞–µ–º —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π –ø—É—Ç—å
    parent_path = get_parent_path(path)

    # –ü–æ–ª—É—á–∞–µ–º –∏–º—è —Ç–µ–∫—É—â–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    dir_name = os.path.basename(path) or path

    # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –ø–µ—Ä–µ–≤–æ–¥ –¥–ª—è –Ω–∞–∑–≤–∞–Ω–∏—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    dir_key = f"dir_{dir_name.replace(' ', '_').lower()}"
    dir_text = get_text(user_language, dir_key, default=dir_name)

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å –≤—ã–±—Ä–∞–Ω–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–µ–π
    text = f"{get_text(user_language, 'select_material_type')}: {dir_text}\n\n"
    text += f"{format_path(path)}"

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–∞–ø–æ–∫ –∏ —Ñ–∞–π–ª–æ–≤ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    directories = await get_directories(path)
    files = await get_files(path)

    if not directories and not files:
        # –ï—Å–ª–∏ –ø–∞–ø–∫–∞ –ø—É—Å—Ç–∞, —Å–æ–æ–±—â–∞–µ–º –æ–± —ç—Ç–æ–º
        text += f"\n\n{get_text(user_language, 'no_materials_found_in_semester')}"

    # –ü–æ–ª—É—á–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    keyboard = await get_navigation_keyboard(user_language, path, parent_path)

    # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback –∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    await callback_query.answer()
    await callback_query.message.edit_text(
        text=text,
        reply_markup=keyboard
    )

async def download_file_callback(callback_query: types.CallbackQuery, callback_data: dict):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞
    """
    user_language = callback_query.data.get('user_language', 'ru')
    file_path = callback_data["value"]

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
    if not await check_file_exists(file_path):
        await callback_query.answer(get_text(user_language, "file_not_found"), show_alert=True)
        return

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞
    loading_text = get_text(user_language, "loading_file")
    await callback_query.answer(loading_text)

    # –ü–æ–ª—É—á–∞–µ–º –∏–º—è —Ñ–∞–π–ª–∞
    file_name = os.path.basename(file_path)

    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ñ–∞–π–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º
        if is_image_file(file_name):
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –∫–∞–∫ —Ñ–æ—Ç–æ
            with open(file_path, 'rb') as photo:
                await callback_query.message.answer_photo(
                    photo=photo,
                    caption=file_name,
                    reply_markup=get_after_file_keyboard(user_language)
                )
        else:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –∫–∞–∫ –¥–æ–∫—É–º–µ–Ω—Ç
            with open(file_path, 'rb') as document:
                await callback_query.message.answer_document(
                    document=document,
                    caption=file_name,
                    reply_markup=get_after_file_keyboard(user_language)
                )
    except Exception as e:
        # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ —Å–æ–æ–±—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await callback_query.message.answer(
            text=f"{get_text(user_language, 'error_sending_file')}: {str(e)}",
            reply_markup=get_back_keyboard(user_language, "back_to_materials")
        )

async def back_to_materials_callback(callback_query: types.CallbackQuery):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º –ø–æ—Å–ª–µ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞
    """
    user_id = callback_query.from_user.id
    user_language = callback_query.data.get('user_language', 'ru')

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —Ñ–∞–∫—É–ª—å—Ç–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    faculty = await get_user_faculty(user_id)

    if not faculty:
        # –ï—Å–ª–∏ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç –Ω–µ –≤—ã–±—Ä–∞–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        await callback_query.answer()
        return await callback_query.forward(lambda: back_to_main_callback(callback_query))

    # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—É—Ç—å –∫ –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–∞
    faculty_path = os.path.join(MATERIALS_FOLDER, faculty)

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è —Ü–µ–Ω—Ç—Ä–∞ –æ–±—É—á–µ–Ω–∏—è
    learning_center_text = get_text(user_language, "learning_center_text")
    faculty_text = get_text(user_language, f"faculty_{faculty.split()[0][0]}_name", default=faculty)

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–æ–º
    text = f"{learning_center_text}\n\n{get_text(user_language, 'current_faculty').format(faculty=faculty_text)}"

    # –ü–æ–ª—É—á–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    keyboard = await get_navigation_keyboard(user_language, faculty_path)

    # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback –∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    await callback_query.answer()
    await callback_query.message.edit_text(
        text=text,
        reply_markup=keyboard
    )

def register_learning_handlers(dp: Dispatcher):
    """
    –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Ü–µ–Ω—Ç—Ä–∞ –æ–±—É—á–µ–Ω–∏—è
    """
    dp.register_message_handler(
        learning_handler,
        lambda message: message.text.startswith("üìö")
    )

    dp.register_callback_query_handler(
        navigate_callback,
        lambda c: c.data.startswith("navigate:"),
        lambda c: {"value": c.data.split(":")[1]}
    )

    dp.register_callback_query_handler(
        download_file_callback,
        lambda c: c.data.startswith("download:"),
        lambda c: {"value": c.data.split(":")[1]}
    )

    dp.register_callback_query_handler(
        back_to_materials_callback,
        lambda c: c.data == "back_to_materials"
    )
