from aiogram import Dispatcher, types
from aiogram.types import InlineKeyboardMarkup

from keyboards.profile_kb import get_faculty_selection_keyboard, get_language_settings_keyboard
from keyboards.language_kb import get_language_keyboard
from keyboards.main_kb import get_main_keyboard

from database.db_manager import set_user_faculty, get_user_faculty, set_user_language

from services.text_manager import get_text
from services.file_manager import get_faculties, check_faculty_exists

from config import PROFILE_INSTRUCTIONS

async def profile_handler(message: types.Message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç"
    """
    user_id = message.from_user.id
    user_language = message.data.get('user_language', 'ru')

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —Ñ–∞–∫—É–ª—å—Ç–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    current_faculty = await get_user_faculty(user_id)

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –ø—Ä–æ—Ñ–∏–ª—è
    profile_text = PROFILE_INSTRUCTIONS.get(user_language, PROFILE_INSTRUCTIONS['en'])

    if current_faculty:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç –≤ —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º–µ
        faculty_exists = await check_faculty_exists(current_faculty)

        if faculty_exists:
            # –ü–æ–ª—É—á–∞–µ–º –∫–ª—é—á –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ –Ω–∞–∑–≤–∞–Ω–∏—è —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–∞
            faculty_key = f"faculty_{current_faculty.split()[0][0]}_name"
            faculty_name = get_text(user_language, faculty_key, default=current_faculty)

            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–µ
            current_faculty_text = get_text(user_language, "current_faculty").format(faculty=faculty_name)
            profile_text += f"\n\n{current_faculty_text}"
        else:
            # –ï—Å–ª–∏ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —É–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            profile_text += f"\n\n{get_text(user_language, 'faculty_not_found')}"
            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—ã–±–æ—Ä —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–∞
            await set_user_faculty(user_id, None)
    else:
        # –ï—Å–ª–∏ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç –Ω–µ –≤—ã–±—Ä–∞–Ω, –¥–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        profile_text += f"\n\n{get_text(user_language, 'no_faculty_selected')}"

    # –ü–æ–ª—É—á–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤—ã–±–æ—Ä–æ–º —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–∞
    keyboard = await get_faculty_selection_keyboard(user_language)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º–∏ –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π –≤—ã–±–æ—Ä–∞ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–∞
    await message.answer(
        text=profile_text,
        reply_markup=keyboard
    )

async def faculty_callback(callback_query: types.CallbackQuery, callback_data: dict):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–∞
    """
    user_id = callback_query.from_user.id
    user_language = callback_query.data.get('user_language', 'ru')
    faculty = callback_data["value"]

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ñ–∞–∫—É–ª—å—Ç–µ—Ç
    await set_user_faculty(user_id, faculty)

    # –ü–æ–ª—É—á–∞–µ–º –∫–ª—é—á –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ –Ω–∞–∑–≤–∞–Ω–∏—è —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–∞
    faculty_key = f"faculty_{faculty.split()[0][0]}_name"
    faculty_name = get_text(user_language, faculty_key, default=faculty)

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–µ
    faculty_selected_text = get_text(user_language, "faculty_selected").format(faculty=faculty_name)

    # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback
    await callback_query.answer(faculty_selected_text)

    # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
    profile_text = PROFILE_INSTRUCTIONS.get(user_language, PROFILE_INSTRUCTIONS['en'])
    current_faculty_text = get_text(user_language, "current_faculty").format(faculty=faculty_name)
    profile_text += f"\n\n{current_faculty_text}"

    # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    keyboard = await get_faculty_selection_keyboard(user_language)

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    await callback_query.message.edit_text(
        text=profile_text,
        reply_markup=keyboard
    )

async def open_language_settings_callback(callback_query: types.CallbackQuery):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–∫—Ä—ã—Ç–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ —è–∑—ã–∫–∞
    """
    user_language = callback_query.data.get('user_language', 'ru')

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ —è–∑—ã–∫–∞
    language_settings_text = get_text(user_language, "language_settings_text")
    current_language_text = get_text(user_language, "current_language").format(
        language=get_text(user_language, f"language_{user_language}")
    )

    # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
    text = f"{language_settings_text}\n\n{current_language_text}"

    # –ü–æ–ª—É—á–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞
    keyboard = get_language_settings_keyboard(user_language)

    # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback –∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    await callback_query.answer()
    await callback_query.message.edit_text(
        text=text,
        reply_markup=keyboard
    )

async def change_language_callback(callback_query: types.CallbackQuery, callback_data: dict):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —è–∑—ã–∫–∞ –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø—Ä–æ—Ñ–∏–ª—è
    """
    user_id = callback_query.from_user.id
    language_code = callback_data["value"]

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —è–∑—ã–∫
    await set_user_language(user_id, language_code)

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ —è–∑—ã–∫–∞ –Ω–∞ –Ω–æ–≤–æ–º —è–∑—ã–∫–µ
    language_settings_text = get_text(language_code, "language_settings_text")
    current_language_text = get_text(language_code, "current_language").format(
        language=get_text(language_code, f"language_{language_code}")
    )

    # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
    text = f"{language_settings_text}\n\n{current_language_text}"

    # –ü–æ–ª—É—á–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞
    keyboard = get_language_settings_keyboard(language_code)

    # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback –∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    await callback_query.answer(f"Language set to {language_code}")
    await callback_query.message.edit_text(
        text=text,
        reply_markup=keyboard
    )

    # –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
    main_keyboard = get_main_keyboard(language_code)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–º –≥–ª–∞–≤–Ω—ã–º –º–µ–Ω—é
    main_menu_text = get_text(language_code, "main_menu_text")
    await callback_query.message.answer(
        text=main_menu_text,
        reply_markup=main_keyboard
    )

async def back_to_profile_callback(callback_query: types.CallbackQuery):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –ø—Ä–æ—Ñ–∏–ª—é –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —è–∑—ã–∫–∞
    """
    user_id = callback_query.from_user.id
    user_language = callback_query.data.get('user_language', 'ru')

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —Ñ–∞–∫—É–ª—å—Ç–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    current_faculty = await get_user_faculty(user_id)

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –ø—Ä–æ—Ñ–∏–ª—è
    profile_text = PROFILE_INSTRUCTIONS.get(user_language, PROFILE_INSTRUCTIONS['en'])

    if current_faculty:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç –≤ —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º–µ
        faculty_exists = await check_faculty_exists(current_faculty)

        if faculty_exists:
            # –ü–æ–ª—É—á–∞–µ–º –∫–ª—é—á –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ –Ω–∞–∑–≤–∞–Ω–∏—è —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–∞
            faculty_key = f"faculty_{current_faculty.split()[0][0]}_name"
            faculty_name = get_text(user_language, faculty_key, default=current_faculty)

            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–µ
            current_faculty_text = get_text(user_language, "current_faculty").format(faculty=faculty_name)
            profile_text += f"\n\n{current_faculty_text}"
        else:
            # –ï—Å–ª–∏ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —É–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            profile_text += f"\n\n{get_text(user_language, 'faculty_not_found')}"
            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—ã–±–æ—Ä —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–∞
            await set_user_faculty(user_id, None)
    else:
        # –ï—Å–ª–∏ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç –Ω–µ –≤—ã–±—Ä–∞–Ω, –¥–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        profile_text += f"\n\n{get_text(user_language, 'no_faculty_selected')}"

    # –ü–æ–ª—É—á–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤—ã–±–æ—Ä–æ–º —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–∞
    keyboard = await get_faculty_selection_keyboard(user_language)

    # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback –∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    await callback_query.answer()
    await callback_query.message.edit_text(
        text=profile_text,
        reply_markup=keyboard
    )

def register_profile_handlers(dp: Dispatcher):
    """
    –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –ª–∏—á–Ω–æ–≥–æ –∫–∞–±–∏–Ω–µ—Ç–∞
    """
    dp.register_message_handler(
        profile_handler,
        lambda message: message.text.startswith("üë§")
    )

    dp.register_callback_query_handler(
        faculty_callback,
        lambda c: c.data.startswith("faculty:"),
        lambda c: {"value": c.data.split(":")[1]}
    )

    dp.register_callback_query_handler(
        open_language_settings_callback,
        lambda c: c.data == "open_language_settings"
    )

    dp.register_callback_query_handler(
        change_language_callback,
        lambda c: c.data.startswith("change_language:"),
        lambda c: {"value": c.data.split(":")[1]}
    )

    dp.register_callback_query_handler(
        back_to_profile_callback,
        lambda c: c.data == "back_to_profile"
    )
