from typing import Dict

# –°–ª–æ–≤–∞—Ä—å —ç–º–æ–¥–∑–∏ –¥–ª—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫ –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
EMOJI_DICT = {
    # –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    "profile_button": "üë§",
    "learning_center_button": "üìö",
    "schedule_button": "üìÜ",
    "channel_button": "üì¢",

    # –ù–∞–≤–∏–≥–∞—Ü–∏—è –∏ –¥–µ–π—Å—Ç–≤–∏—è
    "back_button": "üîô",
    "back_to_main_menu": "üè†",
    "faculty_button": "üè´",
    "language_settings_button": "üåê",

    # –¢–∏–ø—ã –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤
    "folder": "üìÅ",
    "file": "üìÑ",
    "pdf_file": "üìë",
    "image_file": "üñºÔ∏è",
    "document_file": "üìÉ",
    "audio_file": "üéµ",
    "video_file": "üé¨",

    # –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ
    "deanery_button": "üè¢",
    "sports_doctor_button": "‚öïÔ∏è",
    "libraries_button": "üìö",
    "pass_making_button": "ü™™",
    "practice_button": "üë®‚Äç‚öïÔ∏è",

    # –§–∞–∫—É–ª—å—Ç–µ—Ç—ã
    "faculty_L_name": "üè•",  # –õ–µ—á–µ–±–Ω—ã–π
    "faculty_S_name": "ü¶∑",  # –°—Ç–æ–º–∞—Ç–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π
    "faculty_P_name": "üë∂",  # –ü–µ–¥–∏–∞—Ç—Ä–∏—á–µ—Å–∫–∏–π

    # –°—Ç–∞—Ç—É—Å—ã
    "success": "‚úÖ",
    "error": "‚ùå",
    "warning": "‚ö†Ô∏è",
    "info": "‚ÑπÔ∏è",

    # –ü—Ä–æ—á–µ–µ
    "loading": "‚è≥",
    "search": "üîç",
    "settings": "‚öôÔ∏è"
}

def add_emoji_to_text(emoji: str, text: str) -> str:
    """
    –î–æ–±–∞–≤–ª—è–µ—Ç —ç–º–æ–¥–∑–∏ –≤ –Ω–∞—á–∞–ª–æ —Ç–µ–∫—Å—Ç–∞

    –ê—Ä–≥—É–º–µ–Ω—Ç—ã:
        emoji (str): –≠–º–æ–¥–∑–∏ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
        text (str): –ò—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç

    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
        str: –¢–µ–∫—Å—Ç —Å –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–º —ç–º–æ–¥–∑–∏
    """
    return f"{emoji} {text}"

def get_emoji_for_key(key: str, default: str = "") -> str:
    """
    –ü–æ–ª—É—á–∞–µ—Ç —ç–º–æ–¥–∑–∏ –¥–ª—è –∑–∞–¥–∞–Ω–Ω–æ–≥–æ –∫–ª—é—á–∞

    –ê—Ä–≥—É–º–µ–Ω—Ç—ã:
        key (str): –ö–ª—é—á –¥–ª—è –ø–æ–∏—Å–∫–∞ —ç–º–æ–¥–∑–∏
        default (str): –≠–º–æ–¥–∑–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é, –µ—Å–ª–∏ –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω

    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
        str: –≠–º–æ–¥–∑–∏ –¥–ª—è –∫–ª—é—á–∞ –∏–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    """
    return EMOJI_DICT.get(key, default)

def get_emoji_for_file(filename: str) -> str:
    """
    –ü–æ–ª—É—á–∞–µ—Ç —ç–º–æ–¥–∑–∏ –¥–ª—è —Ñ–∞–π–ª–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –µ–≥–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è

    –ê—Ä–≥—É–º–µ–Ω—Ç—ã:
        filename (str): –ò–º—è —Ñ–∞–π–ª–∞

    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
        str: –≠–º–æ–¥–∑–∏, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ —Ç–∏–ø—É —Ñ–∞–π–ª–∞
    """
    ext = filename.split('.')[-1].lower() if '.' in filename else ""

    if ext in ["pdf"]:
        return get_emoji_for_key("pdf_file")
    elif ext in ["jpg", "jpeg", "png", "gif", "bmp"]:
        return get_emoji_for_key("image_file")
    elif ext in ["doc", "docx", "txt", "rtf"]:
        return get_emoji_for_key("document_file")
    elif ext in ["mp3", "wav", "ogg"]:
        return get_emoji_for_key("audio_file")
    elif ext in ["mp4", "avi", "mov", "mkv"]:
        return get_emoji_for_key("video_file")
    else:
        return get_emoji_for_key("file")
